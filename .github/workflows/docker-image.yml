name: Create and publish a Docker image

# Configures this workflow to run every time a change is pushed to the branch called `main`.
on:
  push:
    branches: ['main']

permissions:
  id-token: write # This is required for requesting the JWT (Azure OIDC)
  contents: read  # This is required for actions/checkout (Azure OIDC)

# Environment variables scoped to the workflow.
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  AZURE_WEBAPP_NAME: app-bankdemo-dev

# Build and push docker image to Github container registry & Deploy to Azure App Services
jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
      # 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      # Logs into the container registry using the account and password that will publish the packages. 
      # Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Azure requires the repo name in lowercase
      - name: Lowercase the image name
        run: echo "REPO=${IMAGE_NAME,,}" >>${GITHUB_ENV}
          
      # Extract tags and labels that will be applied to the specified image. 
      # The `id` "meta" allows the output of this step to be referenced in a subsequent step. 
      # The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPO }}
          tags: |
            type=raw,value=${{ github.sha }}
          
      # Build the image, based on repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # The build's `context` is the set of files located in the specified path.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: ./src
          file: ./src/Services/CurrentAccount/CurrentAccount.Api/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push-image

    steps:
      - name: Az CLI login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Azure requires the repo name in lowercase    
      - name: Lowercase the image name
        run: echo "REPO=${IMAGE_NAME,,}" >>${GITHUB_ENV}
        
        # Deploy to Azure Web App
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          images: '${{ env.REGISTRY }}/${{ env.REPO }}:${{ github.sha }}'
